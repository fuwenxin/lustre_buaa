/* ROOT PACKAGE */

RootNamespace returns SysML::Namespace :
	{SysML::Namespace} PackageBodyElement*
;

/* BASIC ELEMENTS */

fragment Identification returns SysML::Element :
	  'id' humanId = Name ( name = Name )?
	| name = Name
;

/* ANNOTATIONS */

/* Comments */

Comment returns SysML::Comment :
	( 'comment' Identification? 'about' ownedRelationship += Annotation
	  ( ',' ownedRelationship += Annotation )*
	| ( 'comment' Identification? )? ownedRelationship += EmptyAnnotation
	)
	body = REGULAR_COMMENT
;

Annotation returns SysML::Annotation :
	annotatedElement = [SysML::Element|QualifiedName]
;

EmptyAnnotation returns SysML::Annotation :
	{SysML::Annotation}
;

/* Documentation */

OwnedDocumentation returns SysML::Documentation :
	ownedRelatedElement += DocumentationComment // documentingComment = DocumentationComment
;

DocumentationComment returns SysML::Comment :
	'doc' ( 'id' humanId = Name )? body = REGULAR_COMMENT
;

PrefixDocumentation returns SysML::Annotation :
	ownedRelatedElement += PrefixDocumentationComment
;

PrefixDocumentationComment returns SysML::Comment :
	( 'doc' ( 'id' humanId = Name )? )? body = DOCUMENTATION_COMMENT
;

/* Textual Representation */

TextualRepresentation returns SysML::TextualRepresentation :
    ( 'rep' Identification? 'about' ownedRelationship += Annotation
    | ( 'rep' Identification? )? ownedRelationship += EmptyAnnotation
    )
    'language' language = STRING_VALUE 
    body = REGULAR_COMMENT
;

/* Annotating Features */

AnnotatingFeature returns SysML::AnnotatingFeature :
	( '@' | 'metadata' ) AnnotatingFeatureDeclaration 
	( 'about' ownedRelationship += Annotation ( ',' ownedRelationship += Annotation )* 
	| ownedRelationship += EmptyAnnotation
	)	
	AnnotatingFeatureBody
;

fragment AnnotatingFeatureDeclaration returns SysML::AnnotatingFeature :
	( Identification DefinedByKeyword )? ownedRelationship += MetadataTyping
;

MetadataTyping returns SysML::FeatureTyping :
	type = [SysML::DataType | QualifiedName]
;

fragment AnnotatingFeatureBody returns SysML::AnnotatingFeature :
	';' | '{' ( ownedRelationship += MetadataFeatureMember )* '}'
;

MetadataFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += MetadataFeature // ownedMemberFeature = MetadataFeature
;

MetadataFeature returns SysML::MetadataFeature :
	'feature'? ( ':>>' | 'redefines')? ownedRelationship += OwnedRedefinition 
	'=' ownedRelationship += MetadataFeatureValue ';' // metadataFeatureValue = MetadataFeatureValue ';'
;

MetadataFeatureValue returns SysML::MetadataFeatureValue :
	ownedRelatedElement += OwnedExpression // metadataValue = OwnedExpression
;

/* PACKAGES */

/* Packages */

Package returns SysML::Package :
	PackageDeclaration PackageBody 
;

fragment PackageDeclaration returns SysML::Package :
	'package' Identification?
;

fragment PackageBody returns SysML::Package :
	  ';' 
	| '{' ( // Note: PackageBodyElement is expanded here to avoid
			// infinite loops in the incremental parser.
		    ownedRelationship += OwnedDocumentation
	      | ownedRelationship += Import
	      | ownedRelationship += PackageMember 
	      | ownedRelationship += ElementFilterMember )* 
	  '}'
;

/* Package Bodies */

fragment PackageBodyElement returns SysML::Namespace :
	  ownedRelationship += OwnedDocumentation 
	| ownedRelationship += Import
	| ownedRelationship += ElementFilterMember
	| ownedRelationship += PackageMember
;

ElementFilterMember returns SysML::ElementFilterMembership :
	'filter' ownedRelatedElement += OwnedExpression ';' // condition = OwnedExpression ';'
;

PackageMember returns SysML::Membership : 
	( ownedRelationship += PrefixDocumentation )*
    ( visibility = BasicVisibilityIndicator )?		
	( NonUsagePackageMember | UsagePackageMember )
;

fragment NonUsagePackageMember returns SysML::Membership :
	  ownedRelatedElement += DefinitionElement //ownedMemberElement = DefinitionElement
	| ( 'alias' | 'import' ) memberElement = [SysML::Element|QualifiedName] ( 'as' memberName = Name )? ';'
;

fragment UsagePackageMember returns SysML::Membership :
	  ownedRelatedElement += UsageElement // ownedMemberElement = UsageElement
;

Import returns SysML::Import :
	( ownedRelationship += PrefixDocumentation )*
	( visibility = BasicVisibilityIndicator )?  
	'import' ( ImportedNamespace | ImportedFilterPackage ) ';'
;

fragment ImportedNamespace returns SysML::Import :
	importedNamespace = [SysML::Namespace|QualifiedName] '::' 
	( '*' | isRecursive ?= '**' )
;

fragment ImportedFilterPackage returns SysML::Import :
	ownedRelatedElement += FilterPackage
;

FilterPackage returns SysML::Package :
	ownedRelationship += FilterPackageImport
	( ownedRelationship += FilterPackageMember )+
;

FilterPackageImport returns SysML::Import :
	ImportedNamespace
;

FilterPackageMember returns SysML::ElementFilterMembership :
	visibility = FilterPackageMemberVisibility ownedRelatedElement += OwnedExpression ']' // condition = OwnedExpression ']'
;

enum FilterPackageMemberVisibility returns SysML::VisibilityKind :
	private = '['
;

enum BasicVisibilityIndicator returns SysML::VisibilityKind:
	public = 'public' | private = 'private'
;

/* Package Elements */

DefinitionElement returns SysML::Element :
	  Package
	| Comment
	| TextualRepresentation
	| AnnotatingFeature
	| Dependency	  
	| AttributeDefinition
	| EnumerationDefinition
	| OccurrenceDefinition
	| IndividualDefinition
	| ItemDefinition
	| PartDefinition
	| ConnectionDefinition
	| InterfaceDefinition
	| AllocationDefinition
	| PortDefinition
	| ActionDefinition
	| CalculationDefinition
	| StateDefinition
	| ConstraintDefinition
	| RequirementDefinition
	| ConcernDefinition
	| StakeholderDefinition
	| CaseDefinition
	| AnalysisCaseDefinition
	| VerificationCaseDefinition
	| ViewDefinition
	| ViewpointDefinition
	| RenderingDefinition
;
	
UsageElement returns SysML::Usage :
	  AttributeUsage
	| EnumerationUsage
	| OccurrenceUsage
	| IndividualUsage
	| PortionUsage
	| ItemUsage
	| PartUsage
	| PortUsage
	| ConnectionUsage
	| AssertConstraintUsage
	| Connector
	| InterfaceUsage
	| AllocationUsage
	| ActionUsage
	| CalculationUsage
	| StateUsage
	| ConstraintUsage
	| RequirementUsage
	| ConcernUsage
	| StakeholderUsage
	| SatisfyRequirementUsage
	| CaseUsage
	| AnalysisCaseUsage
	| VerificationCaseUsage
	| ViewUsage
	| ViewpointUsage
	| RenderingUsage
;

/* CLASSIFIERS */

/* Superclassing */

fragment SuperclassingPart returns SysML::Classifier :
	SpecializesKeyword ownedRelationship += OwnedSuperclassing 
	( ',' ownedRelationship += OwnedSuperclassing )*
;

SpecializesKeyword :
	':>' | 'specializes'
;

OwnedSuperclassing returns SysML::Superclassing:
	superclass = [SysML::Classifier | QualifiedName]
;

/* FEATURES */

/* Features */

fragment FeatureDeclaration returns SysML::Feature :
	  Identification FeatureSpecializationPart?
	| FeatureSpecializationPart
;

fragment FeatureSpecializationPart returns SysML::Feature :
	  ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
	| MultiplicityPart FeatureSpecialization*
;

fragment MultiplicityPart returns SysML::Feature :
	ownedRelationship += MultiplicityMember 
	// NOTE: Can't use "&" here because of use of predication elsewhere.
	( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
	| isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
	)?
;

fragment FeatureSpecialization returns SysML::Feature :
	Typings | Subsettings | Redefinitions
;

fragment Typings returns SysML::Feature :
	TypedBy ( ',' ownedRelationship += OwnedFeatureTyping )*
;

fragment TypedBy returns SysML::Feature :
	DefinedByKeyword ownedRelationship += OwnedFeatureTyping
;

DefinedByKeyword :
	':' | 'defined' 'by'
;

fragment Subsettings returns SysML::Feature :
	Subsets ( ',' ownedRelationship += OwnedSubsetting )*
;

fragment Subsets returns SysML::Feature :
	SubsetsKeyword ownedRelationship += OwnedSubsetting 
;

SubsetsKeyword :
	':>' | 'subsets'
;

fragment Redefinitions returns SysML::Feature :
	Redefines ( ',' ownedRelationship += OwnedRedefinition )*
;

fragment Redefines returns SysML::Feature :
	RedefinesKeyword ownedRelationship += OwnedRedefinition
;

RedefinesKeyword :
	':>>' | 'redefines'
;

/* Feature Typing, Subsetting and Redefinition */

@Override
OwnedFeatureTyping returns SysML::FeatureTyping :
	type = [SysML::Type | QualifiedName]
;

OwnedSubsetting returns SysML::Subsetting:
	subsettedFeature = [SysML::Feature|QualifiedName]
;

OwnedRedefinition returns SysML::Redefinition:
	redefinedFeature = [SysML::Feature | QualifiedName] 
;

/* Multiplicity */

MultiplicityMember returns SysML::Membership :
	ownedRelatedElement += Multiplicity // ownedMemberElement = Multiplicity
;

Multiplicity returns SysML::MultiplicityRange :
	// TODO: Allow general expressions for bounds. (Causes LL parsing issues.)
	'[' ownedRelationship += MultiplicityExpressionMember
	      ( '..' ownedRelationship += MultiplicityExpressionMember )? ']'
;

MultiplicityExpressionMember returns SysML::Membership :
	ownedRelatedElement += ( LiteralExpression | FeatureReferenceExpression ) // ownedMemberElement = ( LiteralExpression | FeatureReferenceExpression )
;

/* CONNECTORS */

/* Connectors */

ConnectorEndMember returns SysML::EndFeatureMembership :
	( memberName = Name '=>' )? ownedRelatedElement += ConnectorEnd // ownedMemberFeature = ConnectorEnd
;

ConnectorEnd returns SysML::Feature :
	ownedRelationship += ( OwnedSubsetting | FeaturePathExpressionMember )
	( ownedRelationship += MultiplicityMember )?
;

FeaturePathExpressionMember returns SysML::FeatureMembership :
	ownedRelatedElement += FeaturePathExpression
;

FeaturePathExpression returns SysML::Expression :
	FeatureReferenceExpression 
	( {SysML::PathStepExpression.operand += current}
	  '.' operand += FeatureReferenceExpression )+
;

/* Binding Connectors */

BindingKeyword :
	'bind'
;

BindingConnector returns SysML::BindingConnector :
	( isAbstract ?= 'abstract' )? BindingKeyword 
	BindingConnectorDeclaration DefinitionBody	
;

fragment BindingConnectorDeclaration returns SysML::BindingConnector :
	( FeatureDeclaration 'as' )?
	ownedRelationship += ConnectorEndMember '=' 
	ownedRelationship += ConnectorEndMember
;

++++++++++++++++++++++++++++++++++++++++++++++++++++/* Successions */

SuccessionKeyword :
	'succession'
;

Succession returns SysML::Succession :
	( isAbstract ?= 'abstract' )? SuccessionKeyword SuccessionDeclaration DefinitionBody
;

fragment SuccessionDeclaration returns SysML::Succession :
	( FeatureDeclaration? 'first' )?
	ownedRelationship += ConnectorEndMember 'then' 
	ownedRelationship += ConnectorEndMember
;

/* INTERACTIONS */

/* Messages */

MessageKeyword :
	'message'
;

Message returns SysML::ItemFlow :
	isAbstract ?= MessageKeyword
	MessageDeclaration DefinitionBody
;

fragment MessageDeclaration returns SysML::ItemFlow :
	FeatureDeclaration? 
    ( 'of'  ownedRelationship += ItemFeatureMember )?
    ( 'from' BinaryConnectorPart | ValuePart )?  
;

/* Item Flows */

ItemFlowKeyword :
	'stream'
;

ItemFlow returns SysML::ItemFlow :
	( isAbstract ?= 'abstract' )? ItemFlowKeyword 
	ItemFlowDeclaration DefinitionBody
;

SuccessionItemFlowKeyword :
	'flow'
;

SuccessionItemFlow returns SysML::SuccessionItemFlow :
	( isAbstract ?= 'abstract' )? SuccessionItemFlowKeyword 
	ItemFlowDeclaration DefinitionBody
;

fragment ItemFlowDeclaration returns SysML::ItemFlow :
	( FeatureDeclaration? 
      ( 'of'  ownedRelationship += ItemFeatureMember )?
      'from' 
    )?
	ownedRelationship += ItemFlowEndMember 'to' 
	ownedRelationship += ItemFlowEndMember
;

ItemFeatureMember returns SysML::FeatureMembership :
	( memberName = Name DefinedByKeyword )? ownedRelatedElement += ItemFeature // ownedMemberFeature = ItemFeature
;

ItemFeature returns SysML::ItemFeature :
	  ownedRelationship += OwnedFeatureTyping 
	  ( ownedRelationship += MultiplicityMember )?
	| ownedRelationship += MultiplicityMember
	  ( ownedRelationship += OwnedFeatureTyping )?
;

ItemFlowEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += ItemFlowEnd // ownedMemberFeature = ItemFlowEnd
;

ItemFlowEnd returns SysML::ItemFlowEnd :
	ownedRelationship += ItemFlowFeatureMember
;

EmptyItemFlowEnd returns SysML::ItemFlowEnd :
	ownedRelationship += EmptyItemFlowFeatureMember
;

ItemFlowFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += ItemFlowFeature // ownedMemberFeature = ItemFlowFeature
;

ItemFlowFeature returns SysML::ItemFlowFeature :
	ownedRelationship += OwnedRedefinition
;

EmptyItemFlowEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += EmptyItemFlowEnd // ownedMemberFeature = EmptyItemFlowEnd
;

EmptyItemFlowFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += EmptyItemFlowFeature // ownedMemberFeature = EmptyItemFlowFeature
;

EmptyItemFlowFeature returns SysML::ItemFlowFeature :
	ownedRelationship += EmptyRedefinition
;

EmptyRedefinition returns SysML::Redefinition :
	{SysML::Redefinition}
;

/* DEPENDENCIES */

Dependency returns SysML::Dependency :
	'dependency' ( Identification? 'from' )?
    client += [SysML::Element|QualifiedName] ( ',' client += [SysML::Element|QualifiedName] )* 'to'
    supplier += [SysML::Element|QualifiedName] ( ',' supplier += [SysML::Element|QualifiedName] )* ';'
;

/* DEFINITION AND USAGE */

/* Definitions */

fragment DefinitionPrefix returns SysML::Definition :
	isAbstract ?= 'abstract' | isVariation ?= 'variation'
;

fragment Definition returns SysML::Definition :
	DefinitionDeclaration DefinitionBody
;

fragment DefinitionDeclaration returns SysML::Definition :	
	Identification? SuperclassingPart?
;

fragment DefinitionBody returns SysML::Type :
	  ';' 
	| '{' DefinitionBodyItem* '}'
;

fragment DefinitionBodyItem returns SysML::Type :
	  ownedRelationship += OwnedDocumentation 
	| => ownedRelationship += Import
	| ownedRelationship += NestedDefinitionMember 
	| ownedRelationship += VariantUsageMember
	| ownedRelationship += FlowUsageMember
	| ownedRelationship += NonOccurrenceUsageMember
	| ( ownedRelationship += EmptySuccessionMember )?
	  ownedRelationship += OccurrenceUsageMember	
;

NestedDefinitionMember returns SysML::Membership : 
	DefinitionMemberPrefix NonUsagePackageMember
;

VariantUsageMember returns SysML::VariantMembership :
	DefinitionMemberPrefix 'variant' 
	ownedRelatedElement += VariantUsageElement // ownedVariantUsage = VariantUsageElement
;

NonOccurrenceUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedRelatedElement += NonOccurrenceUsageElement // ownedMemberFeature = NonOccurrenceUsageElement
;

OccurrenceUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedRelatedElement += OccurrenceUsageElement // ownedMemberFeature = OccurrenceUsageElement
;

StructureUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedRelatedElement += StructureUsageElement // ownedMemberFeature = StructureUsageElement
;

BehaviorUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedRelatedElement += BehaviorUsageElement // ownedMemberFeature = BehaviorUsageElement
;

FlowUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix direction = FeatureDirection
	ownedRelatedElement += FlowUsageElement // ownedMemberFeature = FlowUsageElement
;

fragment DefinitionMemberPrefix returns SysML::Membership :
	( ownedRelationship += PrefixDocumentation )*
    ( visibility = VisibilityIndicator )?
;

enum VisibilityIndicator returns SysML::VisibilityKind :
	public = 'public' | private = 'private' | protected = 'protected'
;

enum FeatureDirection returns SysML::FeatureDirectionKind:
	in = 'in' | out = 'out' | inout = 'inout'
;

/* Usages */

fragment UsagePrefix returns SysML::Usage :
	isAbstract ?= 'abstract' | isVariation ?= 'variation'
;

fragment Usage returns SysML::Usage :
	UsageDeclaration? UsageCompletion
;

fragment UsageDeclaration returns SysML::Feature :
	  FeatureDeclaration
;

fragment UsageCompletion returns SysML::Usage :
	ValueOrFlowPart? UsageBody
;

fragment UsageBody returns SysML::Usage :
	DefinitionBody
;

fragment ValuePart returns SysML::Feature :
	  '=' ownedRelationship += FeatureValue
;

fragment ValueOrFlowPart returns SysML::Feature :
	ValuePart | ownedRelationship += SourceItemFlowMember
;

FeatureValue returns SysML::FeatureValue :
	ownedRelatedElement += OwnedExpression // value = OwnedExpression
;

SourceItemFlowMember returns SysML::Membership :
	ownedRelatedElement += SourceItemFlow // ownedMemberElement = SourceItemFlow
;

SourceItemFlow returns SysML::ItemFlow :
	( ItemFlowKeyword | {SysML::SuccessionItemFlow} SuccessionItemFlowKeyword ) 
	'from' ownedRelationship += ItemFlowEndMember
	ownedRelationship += EmptyItemFlowEndMember
;

/* Reference Usages */

ReferenceKeyword :
	'ref'
;

ReferenceUsageKeyword :
	ReferenceKeyword
;

ReferenceUsage returns SysML::ReferenceUsage :
	UsagePrefix? ReferenceUsageKeyword Usage
;

ReferenceEndUsage returns SysML::ReferenceUsage :
	UsagePrefix? ReferenceUsageKeyword? Usage
;

// TODO: Find a better way to handle variant references that using ReferenceUsage.
ReferenceVariantUsage returns SysML::ReferenceUsage :
	  ReferenceUsage
	| ownedRelationship += OwnedSubsetting 
	  FeatureSpecialization* UsageBody
;

/* Body Elements */

NonOccurrenceUsageElement returns SysML::Feature :
	  ReferenceUsage
	| AttributeUsage
	| EnumerationUsage
	| BindingConnector
	| Succession
;

StructureUsageElement returns SysML::Feature :
	  OccurrenceRefUsage
	| IndividualRefUsage
	| PortionUsage
	| EventOccurrenceUsage
	| ItemRefUsage
	| PartRefUsage
	| StakeholderRefUsage
	| ViewRefUsage
	| RenderingRefUsage
	| PortUsage
	| ConnectionUsage
	| Connector
	| InterfaceUsage
	| AllocationUsage
	| Message
	| ItemFlow
	| SuccessionItemFlow
;

OccurrenceUsageElement returns SysML::Feature :
	StructureUsageElement | BehaviorUsageElement
;

BehaviorUsageElement returns SysML::Usage :
	  ActionRefUsage
	| CalculationRefUsage
	| StateRefUsage
	| ConstraintRefUsage
	| RequirementRefUsage
	| ConcernRefUsage
	| CaseRefUsage
	| AnalysisCaseRefUsage
	| VerificationCaseRefUsage
	| ViewpointRefUsage
	| PerformActionUsage
	| ExhibitStateUsage
	| AssertConstraintUsage
	| SatisfyRequirementUsage
;

VariantUsageElement returns SysML::Usage :
	  ReferenceVariantUsage
	| AttributeVariantUsage
	| OccurrenceRefUsage
	| IndividualRefUsage
	| PortionUsage
	| ItemRefUsage
	| PartRefUsage
	| StakeholderRefUsage
	| PortUsage
	| ConnectionUsage
	| Connector
	| InterfaceUsage
	| AllocationUsage
	| BehaviorUsageElement
;

FlowUsageElement returns SysML::Usage :
	  ReferenceUsage
	| AttributeUsage
	| EnumerationUsage
	| OccurrenceFlowUsage
	| ItemFlowUsage
	| PartFlowUsage
	| StakeholderFlowUsage
	| ViewFlowUsage
	| RenderingFlowUsage
	| ActionFlowUsage
	| CalculationFlowUsage
	| StateFlowUsage
	| ConstraintFlowUsage
	| RequirementFlowUsage
	| ConcernFlowUsage
	| CaseFlowUsage
	| AnalysisCaseFlowUsage
	| VerificationCaseFlowUsage
	| ViewpointFlowUsage
;

/* ATTRIBUTES */

AttributeKeyword :
	'attribute'
;

AttributeDefKeyword :
	AttributeKeyword 'def' | 'value' 'type'
;

AttributeUsageKeyword :
	AttributeKeyword | 'value'
;

AttributeDefinition returns SysML::AttributeDefinition :
	DefinitionPrefix? AttributeDefKeyword Definition
;

AttributeUsage returns SysML::AttributeUsage :
	UsagePrefix? 
	( AttributeUsageKeyword Usage 
	| UsageDeclaration ValueOrFlowPart? UsageBody
	)
;

AttributeVariantUsage returns SysML::AttributeUsage :
	UsagePrefix? AttributeUsageKeyword Usage
;

/* ENUMERATIONS */

EnumerationKeyword :
	'enum'
;
EnumerationDefKeyword :
	EnumerationKeyword 'def'
;

EnumerationUsageKeyword :
	EnumerationKeyword
;

EnumerationDefinition returns SysML::EnumerationDefinition :
	EnumerationDefKeyword DefinitionDeclaration EnumerationBody
;

fragment EnumerationBody returns SysML::EnumerationDefinition :
	  ';' 
	| '{' ( => ownedRelationship += EnumerationUsageMember )* '}'
;

EnumerationUsageMember returns SysML::VariantMembership :
	DefinitionMemberPrefix ownedRelatedElement += EnumeratedValue // ownedVariantUsage = EnumeratedValue
;

EnumeratedValue returns SysML::EnumerationUsage :
	EnumerationUsageKeyword? Usage
;

EnumerationUsage returns SysML::EnumerationUsage :
	EnumerationUsageKeyword Usage
;

++++++++++++++++++++++++++++++++++++++++++++++++++++/* OCCURRENCES */

/* Occurrence Definitions */

OccurrenceKeyword :
	'occurrence'
;

OccurrenceDefKeyword :
	OccurrenceKeyword 'def'
;

fragment OccurrenceDefinitionPrefix returns SysML::OccurrenceDefinition :
	DefinitionPrefix? 
	( isIndividual ?= 'individual' ownedRelationship += LifeClassMembership )?
;

OccurrenceDefinition returns SysML::OccurrenceDefinition :
	OccurrenceDefinitionPrefix OccurrenceDefKeyword Definition
;

IndividualDefinition returns SysML::OccurrenceDefinition :
	DefinitionPrefix? isIndividual ?= 'individual' 'def' Definition
	ownedRelationship += LifeClassMembership
;

LifeClassMembership returns SysML::Membership :
	ownedRelatedElement += LifeClass // ownedMemberElement = LifeClass
;

LifeClass returns SysML::LifeClass :
	{SysML::LifeClass}
;

/* Occurrence Usages */

OccurrenceUsageKeyword :
	OccurrenceKeyword
;

fragment OccurrenceUsagePrefix returns SysML::OccurrenceUsage :
	  ( isIndividual ?= 'individual' )?
	  ( portionKind = PortionKind
	    ownedRelationship += PortioningFeatureMember )?
;

OccurrenceUsage returns SysML::OccurrenceUsage :
	UsagePrefix? OccurrenceUsagePrefix OccurrenceUsageKeyword Usage
;

OccurrenceRefUsage returns SysML::OccurrenceUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix OccurrenceUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= OccurrenceUsageKeyword ) Usage
;

OccurrenceFlowUsage returns SysML::OccurrenceUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix OccurrenceUsageKeyword Usage
;

IndividualUsage returns SysML::OccurrenceUsage :
	UsagePrefix? isIndividual ?= 'individual' Usage
;

IndividualRefUsage returns SysML::OccurrenceUsage :
	  UsagePrefix? 'ref' isIndividual ?= 'individual' Usage
	| UsagePrefix? isIndividual ?= 'individual'
	  UsageDeclaration? ValueOrFlowPart?
	  ( isComposite ?= ';' | isComposite ?= '{' DefinitionBodyItem* '}' )
;

PortionUsage returns SysML::OccurrenceUsage :
	UsagePrefix? ( isIndividual ?= 'individual' )?
	portionKind = PortionKind
	ownedRelationship += PortioningFeatureMember
	Usage
;

enum PortionKind returns SysML::PortionKind :
	snapshot | timeslice
;

PortioningFeatureMember returns SysML::FeatureMembership :
	ownedRelatedElement += PortioningFeature // ownedMemberFeature = PortioningFeature
;

PortioningFeature returns SysML::PortioningFeature :
	{SysML::PortioningFeature}
;

EventOccurrenceUsage returns SysML::EventOccurrenceUsage :
	 UsagePrefix? OccurrenceUsagePrefix 'event'
	( ownedRelationship += OwnedSubsetting FeatureSpecializationPart?
   	| OccurrenceUsageKeyword UsageDeclaration? )
    UsageCompletion
;

/* Occurrence Succession */

EmptySuccessionMember returns SysML::FeatureMembership :
	ownedRelatedElement += EmptySuccession // ownedMemberFeature = EmptySuccession
;

EmptySuccession returns SysML::Succession :
	'then' ownedRelationship += MultiplicitySourceEndMember 
	ownedRelationship += EmptyTargetEndMember
;

MultiplicitySourceEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += MultiplicitySourceEnd // ownedMemberFeature = MultiplicitySourceEnd
;

MultiplicitySourceEnd returns SysML::Feature :
	{SysML::SourceEnd} ( ownedRelationship += MultiplicityMember )?
;

EmptyTargetEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += EmptyTargetEnd // ownedMemberFeature = EmptyTargetEnd
;

EmptyTargetEnd returns SysML::Feature :
	{SysML::TargetEnd}
;

/* ITEMS */

ItemKeyword :
	'item'
;

ItemDefKeyword :
	ItemKeyword 'def'
;

ItemUsageKeyword :
	ItemKeyword
;

ItemDefinition returns SysML::ItemDefinition :
	OccurrenceDefinitionPrefix ItemDefKeyword Definition
;

ItemUsage returns SysML::ItemUsage :
	UsagePrefix? OccurrenceUsagePrefix ItemUsageKeyword Usage
;

ItemFlowUsage returns SysML::ItemUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix ItemUsageKeyword Usage
;

ItemRefUsage returns SysML::ItemUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix ItemUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= ItemUsageKeyword ) Usage
;

/* PARTS */

PartKeyword :
	'part'
;

PartDefKeyword :
	PartKeyword 'def' | 'block'
;

PartUsageKeyword :
	PartKeyword
;

PartDefinition returns SysML::PartDefinition :
	OccurrenceDefinitionPrefix PartDefKeyword Definition
;

PartUsage returns SysML::PartUsage :
	UsagePrefix? OccurrenceUsagePrefix PartUsageKeyword Usage
;

PartFlowUsage returns SysML::PartUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix PartUsageKeyword Usage
;

PartRefUsage returns SysML::PartUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix PartUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= PartUsageKeyword ) Usage
;

/* PORTS */

/* Port Definitions */

PortKeyword :
	'port'
;

PortDefKeyword :
	PortKeyword 'def' | 'interface' 'block'
;

PortDefinition returns SysML::PortDefinition :
	DefinitionPrefix? PortDefKeyword Definition
	ownedRelationship += ConjugatedPortDefinitionMember
;

ConjugatedPortDefinitionMember returns SysML::Membership :
	ownedRelatedElement += ConjugatedPortDefinition // ownedMemberElement = ConjugatedPortDefinition
;

ConjugatedPortDefinition returns SysML::ConjugatedPortDefinition :
	ownedRelationship += PortConjugation
;

PortConjugation returns SysML::PortConjugation :
	{SysML::PortConjugation}
;

/* Port Usages */

PortUsageKeyword :
	PortKeyword
;

PortUsage returns SysML::PortUsage :
	UsagePrefix? PortUsageKeyword PortUsageDeclaration UsageCompletion
;

PortEndUsage returns SysML::PortUsage :
	UsagePrefix? PortUsageKeyword? PortUsageDeclaration UsageCompletion
;

fragment PortUsageDeclaration returns SysML::Usage :
	  Identification PortSpecializationPart?
	| PortSpecializationPart
;

fragment PortSpecializationPart returns SysML::Usage :
	  ( -> PortSpecialization )+ MultiplicityPart? PortSpecialization*
	| MultiplicityPart PortSpecialization*
;

fragment PortSpecialization returns SysML::Usage :
	PortTypings | Subsettings | Redefinitions
;

fragment PortTypings returns SysML::Feature :
	  DefinedByKeyword ownedRelationship += PortTyping 
	  ( ',' ownedRelationship += PortTyping )*
;

PortTyping returns SysML::FeatureTyping :
	OwnedFeatureTyping | ConjugatedPortTyping
;

ConjugatedPortTyping returns SysML::ConjugatedPortTyping :
	'~' portDefinition = [SysML::PortDefinition | QualifiedName]
;

/* CONNECTIONS */

/* Connection Definitions */

ConnectionKeyword :
	'connection'
;

ConnectionDefKeyword :
	ConnectionKeyword 'def' | 'assoc' 'block' 
;

ConnectionDefinition returns SysML::ConnectionDefinition :
	OccurrenceDefinitionPrefix ConnectionDefKeyword 
	DefinitionDeclaration ConnectionBody
;

fragment ConnectionBody returns SysML::Type :
	  ';'
	| '{' (
		  ownedRelationship += OwnedDocumentation
		| ownedRelationship += Import
		| ownedRelationship += NestedDefinitionMember 
		| ownedRelationship += VariantUsageMember
		| ownedRelationship += ConnectionUsageMember
	  )* '}'
;

ConnectionUsageMember returns SysML::FeatureMembership :
	NonOccurrenceUsageMember | OccurrenceUsageMember | ConnectionEndMember
;

ConnectionEndMember returns SysML::EndFeatureMembership :
	DefinitionMemberPrefix 'end' ownedRelatedElement += ConnectionEndElement // ownedMemberFeature = ConnectionEndElement
;

ConnectionEndElement returns SysML::Feature :
	  ReferenceEndUsage
	| ItemRefUsage
	| PartRefUsage
	| PortUsage
	| ActionRefUsage
	| CalculationRefUsage
	| StateRefUsage
;

/* Connection Usages */

ConnectorKeyword :
	'connect'
;

Connector returns SysML::ConnectionUsage :
	UsagePrefix? OccurrenceUsagePrefix ConnectorKeyword ConnectorPart ConnectionBody
;

ConnectionUsageKeyword :
	ConnectionKeyword | 'link'
;

ConnectionUsage returns SysML::ConnectionUsage :
	UsagePrefix? OccurrenceUsagePrefix ConnectionUsageKeyword UsageDeclaration? 
	( ConnectorKeyword ConnectorPart )? ConnectionBody
;

fragment ConnectorPart returns SysML::ConnectionUsage :
	BinaryConnectorPart | NaryConnectorPart
;

fragment BinaryConnectorPart returns SysML::Connector :
	ownedRelationship += ConnectorEndMember 'to' 
	ownedRelationship += ConnectorEndMember
;

fragment NaryConnectorPart returns SysML::Connector :
	'(' ownedRelationship += ConnectorEndMember ',' 
	    ownedRelationship += ConnectorEndMember
	    ( ',' ownedRelationship += ConnectorEndMember )* ')'
;

EmptySourceEndMember returns SysML::EndFeatureMembership :
	ownedRelatedElement += EmptySourceEnd // ownedMemberFeature = EmptySourceEnd
;

EmptySourceEnd returns SysML::Feature :
	{SysML::SourceEnd}
;

/* INTERFACES */

/* Interface Definitions */

InterfaceKeyword :
	'interface'
;

InterfaceDefKeyword :
	InterfaceKeyword 'def'
;

InterfaceDefinition returns SysML::InterfaceDefinition :
	InterfaceDefDeclaration InterfaceDefBody
;

fragment InterfaceDefDeclaration returns SysML::InterfaceDefinition :
	OccurrenceDefinitionPrefix InterfaceDefKeyword DefinitionDeclaration
;

fragment InterfaceDefBody returns SysML::Type :
	  ';'
	| '{' ( 
		  ownedRelationship += OwnedDocumentation
		| ownedRelationship += Import
		| ownedRelationship += NestedDefinitionMember 
		| ownedRelationship += VariantUsageMember
		| ownedRelationship += InterfaceUsageMember
	)* '}'
;

InterfaceUsageMember returns SysML::FeatureMembership :
	NonOccurrenceUsageMember | OccurrenceUsageMember | InterfaceEndMember
;

InterfaceEndMember returns SysML::EndFeatureMembership :
	DefinitionMemberPrefix 'end' ownedRelatedElement += PortEndUsage // ownedMemberFeature = PortEndUsage
;

++++++++++++++++++++++++++++++++++++++++++++++++++++/* Interface Usages */

InterfaceUsageKeyword :
	InterfaceKeyword
;

InterfaceUsage returns SysML::InterfaceUsage :	 
	UsagePrefix? OccurrenceUsagePrefix InterfaceUsageKeyword InterfaceUsageDeclaration InterfaceDefBody
;

fragment InterfaceUsageDeclaration returns SysML::InterfaceUsage :
	UsageDeclaration? ( ConnectorKeyword ConnectorPart )? | ConnectorPart
;

/* ALLOCATIONS */

/* Allocation Definitions */

AllocationKeyword :
	'allocation'
;

AllocationDefKeyword :
	AllocationKeyword 'def'
;

AllocationDefinition returns SysML::AllocationDefinition :
	AllocationDefDeclaration ConnectionBody
;

fragment AllocationDefDeclaration returns SysML::AllocationDefinition :
	OccurrenceDefinitionPrefix AllocationDefKeyword DefinitionDeclaration
;

/* AllocationUsage Usages */

AllocationUsageKeyword :
	AllocationKeyword
;

AllocateKeyword :
	'allocate'
;

AllocationUsage returns SysML::AllocationUsage :	 
	UsagePrefix? OccurrenceUsagePrefix AllocationUsageDeclaration ConnectionBody
;

fragment AllocationUsageDeclaration returns SysML::AllocationUsage :
	    AllocationUsageKeyword UsageDeclaration? ( AllocateKeyword ConnectorPart )?
	  | AllocateKeyword ConnectorPart
;

/* ACTION */

/* Action Definitions */

ActionKeyword :
	'action'
;

ActionDefKeyword :
	ActionKeyword 'def' | 'activity'
;

ActionDefinition returns SysML::ActionDefinition :
	OccurrenceDefinitionPrefix ActionDefKeyword ActionDeclaration ActionBody
;

fragment ActionDeclaration returns SysML::ActionDefinition :
	DefinitionDeclaration ParameterList? 
;

fragment ParameterList returns SysML::Type :
	'(' ( ownedRelationship += ParameterMember 
		( ',' ownedRelationship += ParameterMember )* )? ')'
;

ParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? ownedRelatedElement += Parameter // ownedMemberParameter = Parameter
;

fragment ActionBody returns SysML::Type :
	    ';' 
		// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
		// while incrementally parsing.
	  | '{' => ActionBodyItem* '}' 
;

fragment ActionBodyItem returns SysML::Type :
	  ownedRelationship += OwnedDocumentation
	| ownedRelationship += Import
	| ownedRelationship += NestedDefinitionMember 
	| ownedRelationship += VariantUsageMember
	| ownedRelationship += ParameterFlowUsageMember
	| ownedRelationship += NonOccurrenceUsageMember
	| ( ownedRelationship += EmptySuccessionMember )?
	  ownedRelationship += StructureUsageMember
	| ownedRelationship += InitialNodeMember
	  ( => ownedRelationship += TargetSuccessionMember )*
	| ( ownedRelationship += EmptySuccessionMember )? 
	  ownedRelationship += ( BehaviorUsageMember | ActionNodeMember )
	  ( => ownedRelationship += TargetSuccessionMember )*
	| ownedRelationship += GuardedSuccessionMember
;

ParameterFlowUsageMember returns SysML::ParameterMembership :
	DefinitionMemberPrefix direction = FeatureDirection 
	ownedRelatedElement += FlowUsageElement // ownedMemberParameter = FlowUsageElement
;

InitialNodeMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix 'first' memberFeature = [SysML::Feature|QualifiedName] ';'
	
;

ActionNodeMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedRelatedElement += ActionNode // ownedMemberFeature = ActionNode
;

TargetSuccessionMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedRelatedElement += ActionTargetSuccession ';' // ownedMemberFeature = ActionTargetSuccession ';'
;

GuardedSuccessionMember returns SysML::FeatureMembership :
	ownedRelatedElement += GuardedSuccession ';' // ownedMemberFeature = GuardedSuccession ';'
;

/* Parameters */

Parameter returns SysML::Usage :
      {SysML::ReferenceUsage} ( ParameterDeclaration | ReferenceUsageKeyword ParameterDeclaration?)
    | {SysML::AttributeUsage} AttributeUsageKeyword ParameterDeclaration?
    | {SysML::ItemUsage} ItemUsageKeyword ParameterDeclaration?
    | {SysML::PartUsage} PartUsageKeyword ParameterDeclaration?
    | {SysML::ViewUsage} ViewUsageKeyword ParameterDeclaration?
    | {SysML::RenderingUsage} RenderingUsageKeyword ParameterDeclaration?
    | {SysML::ActionUsage} ActionUsageKeyword ParameterDeclaration?
    | {SysML::CalculationUsage} CalculationUsageKeyword ParameterDeclaration?
    | {SysML::StateUsage} StateUsageKeyword ParameterDeclaration?
    | {SysML::ConstraintUsage} ConstraintUsageKeyword ParameterDeclaration?
    | {SysML::RequirementUsage} RequirementUsageKeyword ParameterDeclaration?
    | {SysML::AnalysisCaseUsage} AnalysisCaseUsageKeyword ParameterDeclaration?
    | {SysML::VerificationCaseUsage} VerificationCaseUsageKeyword ParameterDeclaration?
    | {SysML::ViewpointUsage} ViewpointUsageKeyword ParameterDeclaration?
;

fragment ParameterDeclaration returns SysML::Usage :
	  Identification ParameterSpecializationPart? 
	| ParameterSpecializationPart
;

fragment ParameterSpecializationPart returns SysML::Feature :
	  ( -> ParameterSpecialization )+ MultiplicityPart? ParameterSpecialization*
	| MultiplicityPart ParameterSpecialization*
;

fragment ParameterSpecialization returns SysML::Feature :
	TypedBy | Subsets | Redefines
;

/* Action Usages */

ActionUsageKeyword :
	ActionKeyword
;

ActionUsage returns SysML::ActionUsage :
	UsagePrefix? OccurrenceUsagePrefix ActionUsageKeyword ActionUsageDeclaration ActionBody
;

ActionFlowUsage returns SysML::ActionUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix ActionUsageKeyword ActionUsageDeclaration ActionBody
;

ActionRefUsage returns SysML::ActionUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix ActionUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= ActionUsageKeyword ) 
	ActionUsageDeclaration ActionBody
;

PerformActionUsage returns SysML::PerformActionUsage :
	UsagePrefix? OccurrenceUsagePrefix 'perform' PerformActionUsageDeclaration ActionBody
;

fragment PerformActionUsageDeclaration returns SysML::ActionUsage :
   	( ownedRelationship += OwnedSubsetting FeatureSpecializationPart?
   	| ActionUsageKeyword UsageDeclaration? )
    ( ValuePart | ActionUsageParameterList )?
;

fragment ActionUsageDeclaration returns SysML::Step :
	  UsageDeclaration? ( ValuePart | ActionUsageParameterList )?
;

fragment ActionUsageParameterList returns SysML::Type :
	'(' ( ownedRelationship += ActionUsageParameterMember 
		  ( ',' ownedRelationship += ActionUsageParameterMember )* )? ')'
;

ActionUsageParameterMember returns SysML::ParameterMembership :
	( direction = FeatureDirection )? ownedRelatedElement += ActionUsageParameter // ownedMemberParameter = ActionUsageParameter
;

ActionUsageParameter returns SysML::Usage :
	Parameter ValueOrFlowPart? | {SysML::ReferenceUsage} ValueOrFlowPart
;

/* Action Nodes */

ActionNode returns SysML::ActionUsage :
	  SendNode | AcceptNode | ControlNode
;

AcceptNode returns SysML::AcceptActionUsage :
	UsagePrefix? OccurrenceUsagePrefix AcceptNodeDeclaration ActionBody
;

fragment AcceptNodeDeclaration returns SysML::ActionUsage :
	( 'action' UsageDeclaration )? 'accept' AcceptParameterPart
;

fragment AcceptParameterPart returns SysML::ActionUsage :
	ownedRelationship += ItemParameterMember
	( 'for' ownedRelationship += NodeParameterMember 
	| ownedRelationship += EmptyParameterMember
	)
;

ItemParameterMember returns SysML::ParameterMembership :
	ownedRelatedElement += ItemParameter // ownedMemberParameter = ItemParameter
;

ItemParameter returns SysML::ReferenceUsage :
	  Identification? ItemParameterSpecializationPart
    | ownedRelationship += OwnedFeatureTyping ( ownedRelationship += MultiplicityMember )?
;

fragment ItemParameterSpecializationPart returns SysML::Feature :
	  ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
	| MultiplicityPart FeatureSpecialization+
;

SendNode returns SysML::SendActionUsage :
	UsagePrefix? OccurrenceUsagePrefix SendNodeDeclaration ActionBody
;

fragment SendNodeDeclaration returns SysML::ActionUsage :
	( 'action' UsageDeclaration )? 'send' ownedRelationship += NodeParameterMember 
	'to' ownedRelationship += NodeParameterMember
;

NodeParameterMember returns SysML::ParameterMembership :
	ownedRelatedElement += NodeParameter // ownedMemberParameter = NodeParameter
;

NodeParameter returns SysML::Usage :
	{SysML::ReferenceUsage} ownedRelationship += FeatureValue
;

ControlNode returns SysML::ControlNode :
	  MergeNode
	| DecisionNode
	| JoinNode
	| ForkNode
;

MergeNode returns SysML::MergeNode :
	UsagePrefix? OccurrenceUsagePrefix isComposite ?= 'merge' UsageDeclaration? ';'
;

DecisionNode returns SysML::DecisionNode :
	UsagePrefix? OccurrenceUsagePrefix isComposite ?= 'decide' UsageDeclaration? ';'
;

JoinNode returns SysML::JoinNode :
	UsagePrefix? OccurrenceUsagePrefix isComposite ?= 'join' UsageDeclaration? ';'
;

ForkNode returns SysML::ForkNode :
	UsagePrefix? OccurrenceUsagePrefix isComposite ?= 'fork' UsageDeclaration? ';'
;

EmptyParameterMember returns SysML::ParameterMembership :
	ownedRelatedElement += EmptyParameter // ownedMemberParameter = EmptyParameter
;

EmptyParameter returns SysML::Usage :
	{SysML::ReferenceUsage}
;

/* Action Succession */

ActionTargetSuccession returns SysML::Feature :
	TargetSuccession | GuardedTargetSuccession | DefaultTargetSuccession
;

TargetSuccession returns SysML::Succession :
	'then' ownedRelationship += MultiplicitySourceEndMember 
	ownedRelationship += ConnectorEndMember
;

GuardedTargetSuccession returns SysML::TransitionUsage :
	ownedRelationship += GuardExpressionMember
	'then' ownedRelationship += TransitionSuccessionMember
;

DefaultTargetSuccession returns SysML::TransitionUsage :
	'else' ownedRelationship += TransitionSuccessionMember
;

GuardedSuccession returns SysML::TransitionUsage :
	SuccessionKeyword ( UsageDeclaration? 'first' )? 
	ownedRelationship += TransitionSourceMember 
	ownedRelationship += GuardExpressionMember
	'then' ownedRelationship += TransitionSuccessionMember
;

/* STATES */

/* State Definitions */

StateKeyword :
	'state'
;

StateDefKeyword :
	StateKeyword 'def'
;

StateDefinition returns SysML::StateDefinition :
	( isAbstract ?= 'abstract')? StateDefKeyword ActionDeclaration StateBody
;

fragment StateBody returns SysML::Type :
	';' | '{' StateBodyPart '}'
;

fragment StateBodyPart returns SysML::Type :
	( ownedRelationship += EntryActionMember
	  ( ownedRelationship += EntryTransitionMember )*
	)?
	( ownedRelationship += DoActionMember )?
	( ownedRelationship += ExitActionMember )?
	
	// Note: Using a syntactic predicate here seems to avoid a possible infinite loop
	// while incrementally parsing.
	=> StateDefBodyItem*
;

fragment StateDefBodyItem returns SysML::Type :
	  ownedRelationship += OwnedDocumentation
	| ownedRelationship += Import
	| ownedRelationship += NestedDefinitionMember 
	| ownedRelationship += VariantUsageMember
	| ownedRelationship += ParameterFlowUsageMember
	| ownedRelationship += NonOccurrenceUsageMember
	| ( ownedRelationship += EmptySuccessionMember )?
	  ownedRelationship += StructureUsageMember
	| ( ownedRelationship += EmptySuccessionMember )?
	  ownedRelationship += BehaviorUsageMember
	  ( ownedRelationship += TargetTransitionUsageMember )*
	| ownedRelationship += TransitionUsageMember
;

EntryActionMember returns SysML::StateSubactionMembership :
	DefinitionMemberPrefix kind = EntryActionKind ownedRelatedElement += StateActionUsage // ownedMemberFeature = StateActionUsage
;

EntryActionKind returns SysML::StateSubactionKind :
	'entry'
;

DoActionMember returns SysML::StateSubactionMembership :
	DefinitionMemberPrefix kind = DoActionKind ownedRelatedElement += StateActionUsage // ownedMemberFeature = StateActionUsage
;

DoActionKind returns SysML::StateSubactionKind :
	'do'
;

ExitActionMember returns SysML::StateSubactionMembership :
	DefinitionMemberPrefix kind = ExitActionKind ownedRelatedElement += StateActionUsage // ownedMemberFeature = StateActionUsage
;

ExitActionKind returns SysML::StateSubactionKind :
	'exit'
;

EntryTransitionMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix 
	( ownedRelatedElement += GuardedTargetSuccession // ownedMemberFeature = GuardedTargetSuccession 
	| 'then' ownedRelatedElement += TransitionSuccession // ownedMemberFeature = TransitionSuccession
	) ';'
;

StateActionUsage returns SysML::ActionUsage :
	EmptyActionUsage ';' | PerformedActionUsage ActionBody
;

EmptyActionUsage returns SysML::ActionUsage :
	{SysML::ActionUsage}
;

PerformedActionUsage returns SysML::ActionUsage :
	  {SysML::PerformActionUsage} PerformActionUsageDeclaration 
	| {SysML::AcceptActionUsage} AcceptNodeDeclaration 
	| {SysML::SendActionUsage} SendNodeDeclaration
;

TransitionUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedRelatedElement += TransitionUsage ';' // ownedMemberFeature = TransitionUsage ';'
;

TargetTransitionUsageMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix ownedRelatedElement += TargetTransitionUsage ';' // ownedMemberFeature = TargetTransitionUsage ';'
;

++++++++++++++++++++++++++++++++++++++++++++++++++++/* State Usages */

StateUsageKeyword :
	StateKeyword
;

StateUsage returns SysML::StateUsage :
	UsagePrefix? OccurrenceUsagePrefix StateUsageKeyword ActionUsageDeclaration StateBody
;

StateFlowUsage returns SysML::StateUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix StateUsageKeyword ActionUsageDeclaration StateBody
;

StateRefUsage returns SysML::StateUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix StateUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= StateUsageKeyword ) 
	ActionUsageDeclaration StateBody
;

ExhibitStateUsage returns SysML::ExhibitStateUsage :
    UsagePrefix? OccurrenceUsagePrefix 'exhibit' 
    ( ownedRelationship += OwnedSubsetting FeatureSpecializationPart?
    | StateUsageKeyword UsageDeclaration?
    )
    ( ValuePart | ActionUsageParameterList )? StateBody
;

/* Transition Usages */

TransitionUsageKeyword :
	'transition'
;

TransitionUsage returns SysML::TransitionUsage :
	TransitionUsageKeyword ( UsageDeclaration? 'first' )? 
	ownedRelationship += TransitionSourceMember 
	( ownedRelationship += EmptyImport
	  ownedRelationship += TriggerActionMember )?
	( ownedRelationship += GuardExpressionMember )?
	( ownedRelationship += EffectBehaviorMember )?
	'then' ownedRelationship += TransitionSuccessionMember
;

TargetTransitionUsage returns SysML::TransitionUsage :
	( ownedRelationship += EmptyImport
	  ownedRelationship += TriggerActionMember )?
	( ownedRelationship += GuardExpressionMember )?
	( ownedRelationship += EffectBehaviorMember )?
	'then' ownedRelationship += TransitionSuccessionMember
;

EmptyImport returns SysML::Import :
	{SysML::Import}
;

TransitionSourceMember returns SysML::Membership :
	memberElement = [SysML::Feature|QualifiedName]
;

TriggerActionMember returns SysML::TransitionFeatureMembership :
	kind = TriggerFeatureKind ownedRelatedElement += TriggerAction // ownedMemberFeature = TriggerAction
;

enum TriggerFeatureKind returns SysML::TransitionFeatureKind :
	trigger = 'accept'
;

TriggerAction returns SysML::AcceptActionUsage :
	AcceptParameterPart
;

GuardExpressionMember returns SysML::TransitionFeatureMembership :
	kind = GuardFeatureKind ownedRelatedElement += OwnedExpression // ownedMemberFeature = OwnedExpression
;

enum GuardFeatureKind returns SysML::TransitionFeatureKind :
	guard = 'if'
;

EffectBehaviorMember returns SysML::TransitionFeatureMembership :
	kind = EffectFeatureKind ownedRelatedElement += EffectBehaviorUsage // ownedMemberFeature = EffectBehaviorUsage
;

enum EffectFeatureKind returns SysML::TransitionFeatureKind :
	effect = 'do'
;

EffectBehaviorUsage returns SysML::ActionUsage :
	  EmptyActionUsage | PerformedActionUsage ( '{' ActionBodyItem* '}' )?
;

TransitionSuccessionMember returns SysML::Membership :
	ownedRelatedElement += TransitionSuccession // ownedMemberElement = TransitionSuccession
;

TransitionSuccession returns SysML::Succession :
	ownedRelationship += EmptySourceEndMember 
	ownedRelationship += ConnectorEndMember
;

/* CALCULATIONS */

/* Calculation Definitions */

CalculationKeyword :
	'calc'
;

CalculationDefKeyword :
	CalculationKeyword 'def'
;

CalculationDefinition returns SysML::CalculationDefinition :
	OccurrenceDefinitionPrefix CalculationDefKeyword CalculationDeclaration 
	( CalculationBody 
	| '=' ownedRelationship += ResultExpressionMember ';'
	)
;

fragment CalculationDeclaration returns SysML::CalculationDefinition :
	DefinitionDeclaration ( ParameterList ReturnParameterPart? )?
;

fragment ReturnParameterPart returns SysML::Type :
	ownedRelationship += ReturnParameterMember
;

ReturnParameterMember returns SysML::ReturnParameterMembership :
	'return'? ownedRelatedElement += Parameter // ownedMemberParameter = Parameter
;

fragment CalculationBody returns SysML::Type :
	    ';' 
	  | '{' => CalculationBodyItem*
	        ( ownedRelationship += ResultExpressionMember )?
	    '}' 
;

fragment CalculationBodyItem returns SysML::Type :
	  ActionBodyItem
	| ownedRelationship += ReturnParameterFlowUsageMember
;

ReturnParameterFlowUsageMember returns SysML::ReturnParameterMembership :
	DefinitionMemberPrefix 'return' 
	ownedRelatedElement += FlowUsageElement // ownedMemberParameter = FlowUsageElement
;

@Override
ResultExpressionMember returns SysML::ResultExpressionMembership :
	DefinitionMemberPrefix ownedRelatedElement += OwnedExpression // ownedResultExpression = OwnedExpression
;

/* Calculation Usages */

CalculationUsageKeyword :
	CalculationKeyword
;

CalculationUsage returns SysML::CalculationUsage :
	UsagePrefix? OccurrenceUsagePrefix CalculationUsageKeyword CalculationUsageDeclaration CalculationBody
;

CalculationFlowUsage returns SysML::CalculationUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix CalculationUsageKeyword CalculationUsageDeclaration CalculationBody
;

CalculationRefUsage returns SysML::CalculationUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix CalculationUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= CalculationUsageKeyword ) 
	CalculationUsageDeclaration CalculationBody
;

fragment CalculationUsageDeclaration returns SysML::Step :
	  UsageDeclaration? ( ValuePart | CalculationUsageParameterPart )?
;

fragment CalculationUsageParameterPart returns SysML::Feature :
	  ActionUsageParameterList CalculationReturnParameterPart?
;

fragment CalculationReturnParameterPart returns SysML::Feature :
	ownedRelationship += CalculationReturnParameterMember
;

CalculationReturnParameterMember returns SysML::ReturnParameterMembership :
	'return'? ownedRelatedElement += ActionUsageParameter // ownedMemberParameter = ActionUsageParameter
;

/* CONSTRAINTS */

/* Constraint Definitions */

ConstraintKeyword :
	'constraint'
;

ConstraintDefKeyword :
	ConstraintKeyword 'def'
;

ConstraintDefinition returns SysML::ConstraintDefinition :
	OccurrenceDefinitionPrefix ConstraintDefKeyword ConstraintDeclaration CalculationBody  
;

fragment ConstraintDeclaration returns SysML::ConstraintDefinition :
	DefinitionDeclaration ParameterList? EmptyReturnParameterPart
;

fragment EmptyReturnParameterPart returns SysML::Type :
	ownedRelationship += EmptyReturnParameterMember
;

EmptyReturnParameterMember returns SysML::ReturnParameterMembership :
	ownedRelatedElement += EmptyParameter // ownedMemberParameter = EmptyParameter
;

/* Constraint Usages */

ConstraintUsageKeyword :
	ConstraintKeyword
;

ConstraintUsage returns SysML::ConstraintUsage :
	UsagePrefix? OccurrenceUsagePrefix ConstraintUsageKeyword CalculationUsageDeclaration CalculationBody
;

ConstraintFlowUsage returns SysML::ConstraintUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix ConstraintUsageKeyword CalculationUsageDeclaration CalculationBody
;

ConstraintRefUsage returns SysML::ConstraintUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix ConstraintUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= ConstraintUsageKeyword ) 
	CalculationUsageDeclaration CalculationBody
;

AssertConstraintUsage returns SysML::AssertConstraintUsage :
	UsagePrefix? OccurrenceUsagePrefix 'assert'
    ( ownedRelationship += OwnedSubsetting FeatureSpecializationPart?
    | ConstraintUsageKeyword UsageDeclaration? 
    )
    CalculationUsageParameterPart? InvariantPart CalculationBody
;

fragment InvariantPart returns SysML::Invariant :
	ownedRelationship += TrueLiteralMember
;

TrueLiteralMember returns SysML::FeatureMembership :
	ownedRelatedElement += TrueLiteralExpression // ownedMemberFeature = TrueLiteralExpression
;

TrueLiteralExpression returns SysML::LiteralBoolean :
	{SysML::LiteralBoolean}
;

/* REQUIREMENTS */

/* Requirement Definitions */

RequirementKeyword :
	'requirement'
;

RequirementDefKeyword :
	RequirementKeyword 'def'
;

RequirementDefinition returns SysML::RequirementDefinition :
	OccurrenceDefinitionPrefix RequirementDefKeyword ConstraintDeclaration RequirementBody  
;

fragment RequirementBody returns SysML::Type :
	  ';' | '{' => RequirementBodyItem* '}'
;

fragment RequirementBodyItem returns SysML::Type :
	  DefinitionBodyItem
	| ownedRelationship += SubjectMember
	| ownedRelationship += RequirementConstraintMember
	| ownedRelationship += AddressedConcernMember
	| ownedRelationship += RequirementVerificationMember
;

SubjectMember returns SysML::SubjectMembership :
	DefinitionMemberPrefix ownedRelatedElement += SubjectUsage // ownedSubjectParameter = SubjectUsage
;

SubjectUsage returns SysML::ReferenceUsage :
	'subject' Usage
;

RequirementConstraintMember returns SysML::RequirementConstraintMembership :
	DefinitionMemberPrefix kind = RequirementConstraintKind 
	ownedRelatedElement += RequirementConstraintUsage // ownedMemberFeature = RequirementConstraintUsage
;

enum RequirementConstraintKind returns SysML::RequirementConstraintKind :
	assumption = 'assume' | requirement = 'require'
;

RequirementConstraintUsage returns SysML::ConstraintUsage :
      ownedRelationship += OwnedSubsetting FeatureSpecialization* 
      CalculationUsageParameterPart? RequirementBody
    | 'constraint' CalculationUsageDeclaration CalculationBody
;

AddressedConcernMember returns SysML::AddressedConcernMembership :
	DefinitionMemberPrefix kind = AddressConcernKind 
	ownedRelatedElement += AddressedConcernUsage // ownedMemberFeature = AddressedConcernUsage
;

enum AddressConcernKind returns SysML::RequirementConstraintKind :
	requirement = 'frame'
;

AddressedConcernUsage returns SysML::ConcernUsage :
      ownedRelationship += OwnedSubsetting FeatureSpecialization* 
      CalculationUsageParameterPart? RequirementBody
    | ConcernUsageKeyword CalculationUsageDeclaration CalculationBody
;

/* Requirement Usages */

RequirementUsageKeyword :
	RequirementKeyword
;

RequirementUsage returns SysML::RequirementUsage :
	UsagePrefix? OccurrenceUsagePrefix RequirementUsageKeyword CalculationUsageDeclaration RequirementBody
;

RequirementFlowUsage returns SysML::RequirementUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix RequirementUsageKeyword CalculationUsageDeclaration RequirementBody
;

RequirementRefUsage returns SysML::RequirementUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix RequirementUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= RequirementUsageKeyword ) 
	CalculationUsageDeclaration RequirementBody
;

SatisfyRequirementUsage returns SysML::SatisfyRequirementUsage :
	UsagePrefix? OccurrenceUsagePrefix 'satisfy'
	( ownedRelationship += OwnedSubsetting FeatureSpecializationPart?
    | RequirementUsageKeyword UsageDeclaration? 
    )
    ( ValuePart | ActionUsageParameterList )?
    ( 'by' ownedRelationship += SatisfactionConnectorMember )?
    InvariantPart RequirementBody
;

SatisfactionConnectorMember returns SysML::Membership :
	ownedRelatedElement += SatisfactionConnector // ownedMemberElement = SatisfactionConnector
;

SatisfactionConnector returns SysML::BindingConnector :
	ownedRelationship += EmptySourceEndMember ownedRelationship += ConnectorEndMember
;

++++++++++++++++++++++++++++++++++++++++++++++++++++/* CONCERNS */

/* Concern Definitions */

ConcernKeyword :
	'concern'
;

ConcernDefKeyword :
	ConcernKeyword 'def'
;

ConcernDefinition returns SysML::ConcernDefinition :
	OccurrenceDefinitionPrefix ConcernDefKeyword ConstraintDeclaration ConcernBody  
;

fragment ConcernBody returns SysML::Type :
	  ';' | '{' => ConcernBodyItem* '}'
;

fragment ConcernBodyItem returns SysML::Type :
	  RequirementBodyItem
	| ownedRelationship += AffectedStakeholderMember
;

AffectedStakeholderMember returns SysML::FeatureMembership :
	DefinitionMemberPrefix 'affect'
	ownedRelatedElement += AffectedStakeholderUsage
;

AffectedStakeholderUsage returns SysML::StakeholderUsage :
      ownedRelationship += OwnedSubsetting FeatureSpecialization* 
      UsageBody
    | StakeholderUsageKeyword UsageDeclaration? UsageBody
;

/* Concern Usages */

ConcernUsageKeyword :
	ConcernKeyword
;

ConcernUsage returns SysML::ConcernUsage :
	UsagePrefix? OccurrenceUsagePrefix ConcernUsageKeyword CalculationUsageDeclaration ConcernBody
;

ConcernFlowUsage returns SysML::ConcernUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix ConcernUsageKeyword CalculationUsageDeclaration ConcernBody
;

ConcernRefUsage returns SysML::ConcernUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix ConcernUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= ConcernUsageKeyword ) 
	CalculationUsageDeclaration ConcernBody
;

/* STAKEHOLDERS */

StakeholderKeyword :
	'stakeholder'
;

StakeholderDefKeyword :
	StakeholderKeyword 'def'
;

StakeholderDefinition returns SysML::StakeholderDefinition :
	OccurrenceDefinitionPrefix StakeholderDefKeyword Definition
;

StakeholderUsageKeyword :
	StakeholderKeyword
;

StakeholderUsage returns SysML::StakeholderUsage :
	UsagePrefix? OccurrenceUsagePrefix StakeholderUsageKeyword Usage
;

StakeholderFlowUsage returns SysML::StakeholderUsage :
	UsagePrefix? OccurrenceUsagePrefix 'ref' StakeholderUsageKeyword Usage
;

StakeholderRefUsage returns SysML::StakeholderUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix StakeholderUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= StakeholderUsageKeyword ) Usage
;

/* CASES */

/* Case Definitions */

CaseKeyword :
	'case'
;

CaseDefKeyword :
	CaseKeyword 'def'
;

CaseDefinition returns SysML::CaseDefinition :
	OccurrenceDefinitionPrefix CaseDefKeyword CalculationDeclaration CaseBody
;

fragment CaseBody returns SysML::Type :
	    ';' 
	  | '{' => CaseBodyItem*
	        ( ownedRelationship += ResultExpressionMember )?
	    '}' 
;

fragment CaseBodyItem returns SysML::Type :
	  CalculationBodyItem
	| ownedRelationship += SubjectMember 
	| ownedRelationship += ObjectiveMember
	
;

ObjectiveMember returns SysML::ObjectiveMembership :
	DefinitionMemberPrefix 'objective' ownedRelatedElement += ObjectiveRequirementUsage // ownedObjectiveRequirement = ObjectiveRequirementUsage
;

ObjectiveRequirementUsage returns SysML::RequirementUsage :
	CalculationUsageDeclaration RequirementBody
;

/* Case Usages */

CaseUsageKeyword :
	CaseKeyword
;

CaseUsage returns SysML::CaseUsage :
	UsagePrefix? OccurrenceUsagePrefix CaseUsageKeyword CalculationUsageDeclaration CaseBody
;

CaseFlowUsage returns SysML::CaseUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix CaseUsageKeyword CalculationUsageDeclaration CaseBody
;

CaseRefUsage returns SysML::CaseUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix CaseUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= CaseUsageKeyword ) 
	CalculationUsageDeclaration CaseBody
;

/* ANALYSIS CASES */

AnalysisCaseKeyword :
	'analysis'
;

AnalysisCaseDefKeyword :
	AnalysisCaseKeyword 'def'
;

AnalysisCaseUsageKeyword :
	AnalysisCaseKeyword
;

AnalysisCaseDefinition returns SysML::AnalysisCaseDefinition :
	OccurrenceDefinitionPrefix AnalysisCaseDefKeyword CalculationDeclaration CaseBody
;

AnalysisCaseUsage returns SysML::AnalysisCaseUsage :
	UsagePrefix? OccurrenceUsagePrefix AnalysisCaseUsageKeyword CalculationUsageDeclaration CaseBody
;

AnalysisCaseFlowUsage returns SysML::AnalysisCaseUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix AnalysisCaseUsageKeyword CalculationUsageDeclaration CaseBody
;

AnalysisCaseRefUsage returns SysML::AnalysisCaseUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix AnalysisCaseUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= AnalysisCaseUsageKeyword ) 
	CalculationUsageDeclaration CaseBody
;

/* VERIFICATION CASES */

VerificationCaseKeyword :
	'verification'
;

VerificationCaseDefKeyword :
	VerificationCaseKeyword 'def'
;

VerificationCaseUsageKeyword :
	VerificationCaseKeyword
;

VerificationCaseDefinition returns SysML::VerificationCaseDefinition :
	OccurrenceDefinitionPrefix VerificationCaseDefKeyword CalculationDeclaration CaseBody
;

VerificationCaseUsage returns SysML::VerificationCaseUsage :
	UsagePrefix? OccurrenceUsagePrefix VerificationCaseUsageKeyword CalculationUsageDeclaration CaseBody
;

VerificationCaseFlowUsage returns SysML::VerificationCaseUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix VerificationCaseUsageKeyword CalculationUsageDeclaration CaseBody
;

VerificationCaseRefUsage returns SysML::VerificationCaseUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix VerificationCaseUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= VerificationCaseUsageKeyword ) 
	CalculationUsageDeclaration CaseBody
;

RequirementVerificationMember returns SysML::RequirementVerificationMembership :
	DefinitionMemberPrefix kind = RequirementVerificationKind 
	ownedRelatedElement += RequirementVerificationUsage // ownedRequirement = RequirementVerificationUsage
;

enum RequirementVerificationKind returns SysML::RequirementConstraintKind :
	requirement = 'verify'
;

RequirementVerificationUsage returns SysML::RequirementUsage :
      ownedRelationship += OwnedSubsetting FeatureSpecialization* 
      CalculationUsageParameterPart? RequirementBody
    | 'requirement' CalculationUsageDeclaration RequirementBody
;

/* VIEWS */

/* View Definitions */

ViewKeyword :
	'view'
;

ViewDefKeyword :
	ViewKeyword 'def'
;

ViewDefinition returns SysML::ViewDefinition :
	OccurrenceDefinitionPrefix ViewDefKeyword DefinitionDeclaration ViewDefinitionBody
;

fragment ViewDefinitionBody returns SysML::ViewDefinition :
	  ';' 
	| '{' ViewDefinitionBodyItem* '}'
;

fragment ViewDefinitionBodyItem returns SysML::ViewDefinition :
	  DefinitionBodyItem
	| ownedRelationship += ElementFilterMember
	| ownedRelationship += ViewRenderingMember
;

ViewRenderingMember returns SysML::ViewRenderingMembership :
	DefinitionMemberPrefix 'render' 
	ownedRelatedElement += ViewRenderingUsage // ownedRendering = ViewRenderingUsage
;

ViewRenderingUsage returns SysML::RenderingUsage :
	 ownedRelationship += OwnedSubsetting FeatureSpecialization* UsageBody
;

/* View Usages */

ViewUsageKeyword :
	ViewKeyword
;

ViewUsage returns SysML::ViewUsage :
	UsagePrefix? OccurrenceUsagePrefix ViewUsageKeyword UsageDeclaration? ValueOrFlowPart? ViewBody
;

ViewFlowUsage returns SysML::ViewUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix ViewUsageKeyword UsageDeclaration? ValueOrFlowPart? ViewBody
;

ViewRefUsage returns SysML::ViewUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix ViewUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= ViewUsageKeyword ) 
	UsageDeclaration? ValueOrFlowPart? ViewBody
;

fragment ViewBody returns SysML::ViewUsage :
	';' | '{' ViewBodyItem* '}'
;

fragment ViewBodyItem returns SysML::ViewUsage :
	  DefinitionBodyItem
	| ownedRelationship += ElementFilterMember
	| ownedRelationship += Expose
	| ownedRelationship += ViewRenderingMember
;

Expose returns SysML::Expose :
	( ownedRelationship += PrefixDocumentation )*
	( visibility = BasicVisibilityIndicator )?  
	'expose' ( ImportedNamespace | ImportedFilterPackage ) ';'
;

/* VIEWPOINTS */

ViewpointKeyword :
	'viewpoint'
;

ViewpointDefKeyword :
	ViewpointKeyword 'def'
;

ViewpointUsageKeyword :
	ViewpointKeyword
;

ViewpointDefinition returns SysML::ViewpointDefinition :
	OccurrenceDefinitionPrefix ViewpointDefKeyword ConstraintDeclaration RequirementBody  
;

ViewpointUsage returns SysML::ViewpointUsage :
	UsagePrefix? OccurrenceUsagePrefix ViewpointUsageKeyword CalculationUsageDeclaration RequirementBody
;

ViewpointFlowUsage returns SysML::ViewpointUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix ViewpointUsageKeyword CalculationUsageDeclaration RequirementBody
;

ViewpointRefUsage returns SysML::ViewpointUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix ViewpointUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= ViewpointUsageKeyword ) 
	CalculationUsageDeclaration RequirementBody
;

/* RENDERINGS */

RenderingKeyword :
	'rendering'
;

RenderingDefKeyword :
	RenderingKeyword 'def'
;

RenderingDefinition returns SysML::RenderingDefinition :
	OccurrenceDefinitionPrefix RenderingDefKeyword Definition
;

RenderingUsageKeyword :
	RenderingKeyword
;

RenderingUsage returns SysML::RenderingUsage :
	UsagePrefix? OccurrenceUsagePrefix RenderingUsageKeyword Usage
;

RenderingFlowUsage returns SysML::RenderingUsage :
	UsagePrefix? 'ref'? OccurrenceUsagePrefix RenderingUsageKeyword Usage
;

RenderingRefUsage returns SysML::RenderingUsage :
	UsagePrefix? 
	( 'ref' OccurrenceUsagePrefix RenderingUsageKeyword 
	| OccurrenceUsagePrefix isComposite ?= RenderingUsageKeyword ) Usage
;

/* EXPRESSIONS */

@Override
ExpressionBody returns SysML::Expression :
	CalculationBody
;