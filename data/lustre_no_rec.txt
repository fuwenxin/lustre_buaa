Program -> Include PackBody
        -> Include PackList
        -> PackBody
        -> PackList

PackList -> OnePack PackList
        -> OnePack 
        
OnePack-> ModelDecl
        -> PackDecl
        -> PackEq

Provides -> provides Provide ; Provides_1
        -> $

Provides_1 -> Provide ; Provides_1
        -> $

Provide -> const lv6id : Type Provide_1
        -> unsafenode lv6id StaticParams Params returns Params
        -> node lv6id StaticParams Params returns Params
        -> unsafefunction lv6id StaticParams Params returns Params
        -> function lv6id StaticParams Params returns Params
        -> type OneTypeDecl

Provide_1 -> = Expression
        -> $

ModelDecl -> model lv6id Uses needs StaticParamList ; Provides body PackBody end

PackDecl -> package lv6id Uses Provides body PackBody end

Uses -> uses lv6id Uses_1 ; | $

Eq_or_Is -> =
        -> is

PackEq -> package lv6id Eq_or_Is lv6id ( ByNameStaticArgList ) ;

PackBody -> OneDecl PackBody
        -> OneDecl

OneDecl -> NodeDecl
        -> ConstDecl
        -> TypeDecl
        -> ExtNodeDecl

TypedLv6IdsList -> TypedLv6Ids TypedLv6IdsList_1
TypedLv6IdsList_1 -> ; TypedLv6Ids TypedLv6IdsList_1
        -> $ 
        
TypedLv6Ids-> lv6id Uses_1 : Type

TypedValuedLv6Ids -> TypedValuedLv6Id TypedValuedLv6Ids_1
TypedValuedLv6Ids_1 -> ; TypedValuedLv6Id TypedValuedLv6Ids_1
        -> $

TypedValuedLv6Id -> lv6id TypedValuedLv6Id_1
TypedValuedLv6Id_1 -> : Type
        -> , lv6id Uses_1 : Type
        -> : Type = Expression 
        
ConstDecl->const ConstDeclList 

ConstDeclList-> OneConstDecl ; ConstDeclList
        -> OneConstDecl ;

OneConstDecl -> lv6id OneConstDecl_1
OneConstDecl_1 -> : Type
        -> , lv6id OneConstDecl_2 : Type
        -> : Type = Expression
        -> = Expression
OneConstDecl_2 -> , lv6id OneConstDecl_2 | , lv6id


TypeDecl -> type TypeDeclList 

TypeDeclList-> OneTypeDecl ; TypeDeclList
        -> OneTypeDecl ;

OneTypeDecl -> lv6id OneTypeDecl_1
        -> $
OneTypeDecl_1 -> = OneTypeDecl_2
OneTypeDecl_2 -> Type
        -> enum { lv6id Uses_1 }
        -> OneTypeDecl_3 { TypedValuedLv6Ids OneTypeDecl_4 }

Uses_1 -> , lv6id Uses_1
        -> $
OneTypeDecl_3 -> struct
        -> $
OneTypeDecl_4 -> ;
        -> $
        
Type -> Type_1 Type_2
Type_1 -> bool
        -> int
        -> real
        -> lv6idref
Type_2 -> ^ Expression Type_2
        -> $

ExtNodeDecl -> ExtNodeDecl_1 lv6id Params returns Params OneTypeDecl_4
ExtNodeDecl_1 -> externfunction
        -> unsafeexternfunction
        -> externnode
        -> unsafeexternnode

NodeDecl -> LocalNode
LocalNode -> node lv6id StaticParams Params returns Params OneTypeDecl_4 LocalDecls Body LocalNode_1
        -> function lv6id StaticParams Params returns Params OneTypeDecl_4 LocalDecls Body LocalNode_1
        -> node lv6id StaticParams NodeProfileOpt = EffectiveNode OneTypeDecl_4
        -> function lv6id StaticParams NodeProfileOpt = EffectiveNode OneTypeDecl_4
        -> unsafenode lv6id StaticParams Params returns Params OneTypeDecl_4 LocalDecls Body LocalNode_1
        -> unsafefunction lv6id StaticParams Params returns Params OneTypeDecl_4 LocalDecls Body LocalNode_1
        -> unsafenode lv6id StaticParams NodeProfileOpt = EffectiveNode OneTypeDecl_4
        -> unsafefunction lv6id StaticParams NodeProfileOpt = EffectiveNode OneTypeDecl_4
LocalNode_1 -> .
        -> ;
        -> $

NodeProfileOpt -> Params returns Params
        -> $
StaticParams -> << StaticParamList >>
        -> $

StaticParamList -> StaticParam StaticParamList_1
StaticParamList_1 -> ; StaticParam StaticParamList_1
        -> $ 
        
StaticParam -> type lv6id
        -> const lv6id : Type
        -> node lv6id Params returns Params
        -> function lv6id Params returns Params
        -> unsafenode lv6id Params returns Params
        -> unsafefunction lv6id Params returns Params

Params -> ( Params_1
Params_1 -> VarDeclList OneTypeDecl_4 )
        -> )

LocalDecls -> LocalDeclList
        -> $

LocalDeclList -> OneLocalDecl LocalDeclList
        -> OneLocalDecl 

OneLocalDecl-> LocalVars
        -> LocalConsts

LocalConsts -> const ConstDeclList

LocalVars -> var VarDeclList ;

VarDeclList -> VarDecl VarDeclList_1                    
VarDeclList_1 -> ; VarDecl VarDeclList_1
        -> $

VarDecl -> TypedLv6Ids
        -> TypedLv6Ids when ClockExpr
        -> ( TypedLv6IdsList ) when ClockExpr

Body -> let Body_1
Body_1 -> EquationList tel
        -> tel

EquationList -> Equation 
        -> Equation EquationList
        
Equation -> assert Expression ;
        -> Left = Expression ;
        
Left -> LeftItemList
        -> ( LeftItemList )

LeftItemList -> LeftItem LeftItemList_1
LeftItemList_1 -> , LeftItem LeftItemList_1
        -> $

LeftItem -> lv6id

FieldLeftItem -> lv6id . lv6id FieldLeftItemT1
        -> TableLeftItem . lv6id FieldLeftItemT1

TableLeftItem -> lv6id TableLeftItem_1 TableLeftItemT1
        -> lv6id . lv6id FieldLeftItemT1 TableLeftItem_1 TableLeftItemT1
TableLeftItem_1 -> Expression
        -> Select
        -> $

Expression -> Constant ExpressionT1
        -> lv6id ExpressionT1
        -> not Expression ExpressionT1
        -> - Expression ExpressionT1
        -> pre Expression ExpressionT1
        -> current Expression ExpressionT1
        -> int Expression ExpressionT1
        -> real Expression ExpressionT1
        -> if Expression then Expression else Expression ExpressionT1
        -> with Expression then Expression else Expression ExpressionT1
        -> # ( ExpressionList ) ExpressionT1
        -> nor ( ExpressionList ) ExpressionT1
        -> CallByPosExpression ExpressionT1
        -> [ ExpressionList ] ExpressionT1
        -> CallByNameExpression ExpressionT1
        -> ( ExpressionList ) ExpressionT1
        -> merge lv6id MergeCaseList ExpressionT1

MergeCaseList -> MergeCase MergeCaseList
        -> $

MergeCase -> ( MergeCase_1 *> Expression )
        -> $
MergeCase_1 -> lv6idref
        -> true
        -> false 
        
ClockExpr-> lv6idref ( lv6id )
        -> lv6id
        -> not lv6id
        -> not ( lv6id )

PredefOp -> not
        -> fby
        -> pre
        -> current
        -> *>
        -> and
        -> or
        -> xor
        -> =>
        -> =
        -> <>
        -> <
        -> <=
        -> >
        -> >=
        -> div
        -> mod
        -> -
        -> +
        -> /
        -> *
        -> if

CallByPosExpression -> EffectiveNode ( ExpressionList )

EffectiveNode -> lv6id << StaticArgList >>
        -> lv6id

StaticArgList -> StaticArg StaticArgList_1
StaticArgList_1 -> StaticArgList_2 StaticArg StaticArgList_1
        -> $
StaticArgList_2 -> ,
        -> ;

StaticArg -> type Type
        -> const Expression
        -> node EffectiveNode
        -> function EffectiveNode
        -> not
        -> fby
        -> pre
        -> current
        -> *>
        -> and
        -> or
        -> xor
        -> =>
        -> =
        -> <>
        -> <
        -> <=
        -> >
        -> >=
        -> div
        -> mod
        -> -
        -> +
        -> /
        -> *
        -> if
        -> SimpleExp
        -> SurelyType
        -> SurelyNode

ByNameStaticArgList -> ByNameStaticArg ByNameStaticArgList1
ByNameStaticArgList1 -> , ByNameStaticArg ByNameStaticArgList1
        -> ; ByNameStaticArg ByNameStaticArgList1
        -> $

ByNameStaticArg -> type lv6id = Type
        -> const lv6id = Expression
        -> node lv6id = EffectiveNode
        -> function lv6id = EffectiveNode
        -> lv6id = PredefOp
        -> lv6id = SimpleExp
        -> lv6id = SurelyType
        -> lv6id = SurelyNode

SurelyNode -> lv6idref << StaticArgList >>

SurelyType -> SurelyType_1 SurelyType_2
SurelyType_1 -> bool
        -> int
        -> real

SurelyType_2 -> ^ Expression SurelyType_2
        -> $

SimpleExp -> SimpleExpT1
        -> Constant lv6idref SimpleExpT1
        -> SimpleTuple SimpleExpT1
        -> not SimpleExp SimpleExpT1
        -> - SimpleExp SimpleExpT1
        -> if SimpleExp then SimpleExp else SimpleExp SimpleExpT1

SimpleTuple -> ( SimpleExpList )
        -> $

SimpleExpList -> SimpleExpT1 SimpleExpList_1
        -> Constant lv6idref SimpleExpT1 SimpleExpList_1
        -> ( SimpleExpList ) SimpleExpT1 SimpleExpList_1
        -> $ SimpleExpT1 SimpleExpList_1
        -> not SimpleExp SimpleExpT1 SimpleExpList_1
        -> - SimpleExp SimpleExpT1 SimpleExpList_1
        -> if SimpleExp then SimpleExp else SimpleExp SimpleExpT1 SimpleExpList_1

SimpleExpList_1 -> , SimpleExp SimpleExpList_1
        -> $

CallByNameExpression -> lv6idref { CallByNameExpression_1 }
        -> $

CallByNameExpression_1 -> lv6idref with CallByNameParamList OneTypeDecl_4
        -> CallByNameParamList OneTypeDecl_4

CallByNameParamList -> CallByNameParam CallByNameParamList_1
CallByNameParamList_1 -> , CallByNameParam CallByNameParamList_1
        -> ; CallByNameParam CallByNameParamList_1
        -> $

ExpressionList -> Constant ExpressionT1 ExpressionList_1
        -> lv6id ExpressionT1 ExpressionList_1
        -> not Expression ExpressionT1 ExpressionList_1
        -> - Expression ExpressionT1 ExpressionList_1
        -> pre Expression ExpressionT1 ExpressionList_1
        -> current Expression ExpressionT1 ExpressionList_1
        -> int Expression ExpressionT1 ExpressionList_1
        -> real Expression ExpressionT1 ExpressionList_1
        -> if Expression then Expression else Expression ExpressionT1 ExpressionList_1
        -> with Expression then Expression else Expression ExpressionT1 ExpressionList_1
        -> # ( ExpressionList ) ExpressionT1 ExpressionList_1
        -> nor ( ExpressionList ) ExpressionT1 ExpressionList_1
        -> lv6id << StaticArgList >> ( ExpressionList ) ExpressionT1 ExpressionList_1
        -> lv6id ( ExpressionList ) ExpressionT1 ExpressionList_1
        -> [ ExpressionList ] ExpressionT1 ExpressionList_1
        -> lv6id { CallByNameExpression_1 } ExpressionT1 ExpressionList_1
        -> $ ExpressionT1 ExpressionList_1
        -> ( ExpressionList ) ExpressionT1 ExpressionList_1
        -> merge lv6id MergeCaseList ExpressionT1 ExpressionList_1
        -> $

ExpressionList_1 -> , Expression ExpressionList_1
        -> $

Constant -> true
        -> false
        -> intconst
        -> realconst

Select -> true ExpressionT1 .. Expression Step
        -> false ExpressionT1 .. Expression Step
        -> intconst ExpressionT1 .. Expression Step
        -> realconst ExpressionT1 .. Expression Step
        -> lv6idref ExpressionT1 .. Expression Step
        -> not Expression ExpressionT1 .. Expression Step
        -> - Expression ExpressionT1 .. Expression Step
        -> pre Expression ExpressionT1 .. Expression Step
        -> current Expression ExpressionT1 .. Expression Step
        -> int Expression ExpressionT1 .. Expression Step
        -> real Expression ExpressionT1 .. Expression Step
        -> if Expression then Expression else Expression ExpressionT1 .. Expression Step
        -> with Expression then Expression else Expression ExpressionT1 .. Expression Step
        -> # ( ExpressionList ) ExpressionT1 .. Expression Step
        -> nor ( ExpressionList ) ExpressionT1 .. Expression Step
        -> lv6idref << StaticArgList >> ( ExpressionList ) ExpressionT1 .. Expression Step
        -> lv6idref ( ExpressionList ) ExpressionT1 .. Expression Step
        -> [ ExpressionList ] ExpressionT1 .. Expression Step
        -> lv6idref { CallByNameExpression_1 } ExpressionT1 .. Expression Step
        -> $ ExpressionT1 .. Expression Step
        -> ( ExpressionList ) ExpressionT1 .. Expression Step
        -> merge lv6id MergeCaseList ExpressionT1 .. Expression Step
        
Step -> step Expression
        -> $

Pragma -> % TK IDENT : TK IDENT % Pragma
        -> $

Include -> include "<string>"

FieldLeftItemT1 -> . lv6id FieldLeftItemT1
       -> $

TableLeftItemT1 -> . lv6id FieldLeftItemT1 TableLeftItem_1 TableLeftItemT1
        -> TableLeftItem_1 TableLeftItemT1
        -> $

ExpressionT1 -> fby Expression ExpressionT1
        -> *> Expression ExpressionT1
        -> and Expression ExpressionT1
        -> or Expression ExpressionT1
        -> xor Expression ExpressionT1
        -> => Expression ExpressionT1
        -> = Expression ExpressionT1
        -> <> Expression ExpressionT1
        -> < Expression ExpressionT1
        -> <= Expression ExpressionT1
        -> > Expression ExpressionT1
        -> >= Expression ExpressionT1
        -> div Expression ExpressionT1
        -> mod Expression ExpressionT1
        -> - Expression ExpressionT1
        -> + Expression ExpressionT1
        -> / Expression ExpressionT1
        -> * Expression ExpressionT1
        -> ^ Expression ExpressionT1
        -> ^ Expression ExpressionT1
        -> [ Expression ] ExpressionT1
        -> [ Select ] ExpressionT1
        -> . lv6id ExpressionT1
        -> $

SimpleExpT1 -> and SimpleExp SimpleExpT1
        -> or SimpleExp SimpleExpT1
        -> xor SimpleExp SimpleExpT1
        -> => SimpleExp SimpleExpT1
        -> = SimpleExp SimpleExpT1
        -> <> SimpleExp SimpleExpT1
        -> < SimpleExp SimpleExpT1
        -> <= SimpleExp SimpleExpT1
        -> > SimpleExp SimpleExpT1
        -> >= SimpleExp SimpleExpT1
        -> div SimpleExp SimpleExpT1
        -> mod SimpleExp SimpleExpT1
        -> - SimpleExp SimpleExpT1
        -> + SimpleExp SimpleExpT1
        -> / SimpleExp SimpleExpT1
        -> * SimpleExp SimpleExpT1
        -> $